datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id                    String      @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?     @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}
 
model Account{
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @db.ObjectId @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.String
  access_token      String?   @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.String
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  servers           Server[]
  members           Member[]
  channels          Channel[]

  @@unique([provider, providerAccountId])
}

model Server{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  serverImage   String?
  name          String?
  inviteCode    String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userId        String    @db.ObjectId
  account       Account   @relation(fields: [userId], references: [id], onDelete: Cascade)

  members       Member[]
  channels      Channel[]

  @@index([userId])
}

model Member{
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  role          MemberRole      @default(GUEST)
  userId        String          @db.ObjectId
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  profile       Account         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  serverId      String          @db.ObjectId
  server        Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages      Message[]

  @@index([userId, serverId])
}

model Channel{
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  type          ChannelType     @default(TEXT)

  userId        String          @db.ObjectId
  account       Account         @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId      String          @db.ObjectId
  server        Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  messages      Message[]

  @@index([userId, serverId])
}

model Message{
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt  

  memberId      String          @db.ObjectId
  member        Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId     String          @db.ObjectId
  channel       Channel         @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted       Boolean         @default(false)         
}
 




enum MemberRole{
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType{
  TEXT
  AUDIO
}

